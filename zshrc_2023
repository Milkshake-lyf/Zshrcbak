# p10k 最先加载就会先显示 zsh 主题，但插件还是会有延迟一点（因为顺序问题）
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
# End of Powerlevel10k


### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit


# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

### Myself Config ------------------------------------------------


### Moved
### Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
### End of lines configured by zsh-newuser-install

# Set case a/A
# 忽略补全大小写
autoload -Uz compinit && compinit -u
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*'


# Some comment
# Turbo Mode (Zsh >= 5.3)：
# Zinit 中所谓的 Turbo Mode，其实就是插件延迟加载功能，
# 更确切的说，就是使用ice修饰符的wait选项进行插件加载。比如：
# PS1="READY > "
# zinit ice wait'!0'
# zinit load halfo/lambda-mod-zsh-theme
# 上述命令表示终端在加载完成.zshrc文件并成功显示第一个 prompt 时，
# 加载插件halfo/lambda-mod-zsh-theme。
# 实际上插件真正进行加载大约是在提示符READY >出现后的 1ms 内。
# 更多关于 ice 的用法参见 https://github.com/zdharma-continuum/zinit#ice-modifiers
# 示例：lucid 参数是为了开启 wait 静默输出
# zinit ice wait lucid
# zinit load zdharma-continuum/history-search-multi-word

# 全局 ice 选项：light-mode (以 light 模式加载)
#  zinit light-mode for \
#     lucid wait zsh-users/zsh-completions \ # 仅适用于此插件的 ice 选项：lucid (静默延迟加载消息), wait (延迟加载)
#     zsh-users/zsh-syntax-highlighting # 以 light 模式 (全局 ice 选项) 正常加载
# 不要直接复制上面的代码，因为有语法错误 (不允许在 \ 后面写注释)，无法运行。
# 不设置任何 ice 选项，依次加载每个插件。
#  zinit for \
#      zsh-users/zsh-completions \
#      zsh-users/zsh-syntax-highlighting
# End of comment


### Plugins

# prompt 主题
zinit ice depth 1
zinit light romkatv/powerlevel10k

# 命令高亮
zinit ice wait lucid depth 1
zinit light zsh-users/zsh-syntax-highlighting

# 命令补全
#zinit ice wait lucid depth 1
#zinit ice depth 1
#zinit light zsh-users/zsh-completions

# 历史命令补全
zinit ice depth 1
zinit light zsh-users/zsh-autosuggestions

# 替换默认的补全菜单选择，使用了 fzf 需提前安装
zinit ice wait lucid depth 1
zinit light Aloxaf/fzf-tab

# fzf
# 刚好借助 zinit 管理 fzf 的脚本，不然只单独安装二进制包没有自动补全和按键绑定
# 使用 ice 修饰符 atclone 在克隆完成后执行一条命令
zinit ice wait lucid atclone"bash $HOME/.local/share/zinit/plugins/junegunn---fzf/install" depth 1 
zinit light junegunn/fzf

# 目录导航工具，适用于过去访问过的每个目录
# 该插件允许根据模糊匹配和访问该目录的频率导航到以前去过的任何目录
zinit ice wait lucid depth 1
zinit light rupa/z

### End of Plugins

### End of myself config ------------------------------------------------

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/miniconda/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/miniconda/etc/profile.d/conda.sh" ]; then
        . "/opt/miniconda/etc/profile.d/conda.sh"
    else
        export PATH="/opt/miniconda/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

##########################
# 注：p10k 需要的字体仓库
# https://github.com/romkatv/powerlevel10k-media
# 克隆后手动安装，步骤
# mkdir /usr/share/fonts/{font-name}
# mv {fonts} /usr/share/fonts/{font-name}
# fc-cache
# 在当前目录建立字体数据缓存
# fc-cache Build font information caches in [dirs]

# 借助 zinit 管理 fzf 运行克隆下来仓库里面的 install 脚本自动添加的
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

